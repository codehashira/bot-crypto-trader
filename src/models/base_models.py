"""
Base data models for the cryptocurrency trading bot.
These models define the core data structures used throughout the application.
"""

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union


class OrderType(Enum):
    """Order types supported by exchanges."""
    MARKET = "MARKET"
    LIMIT = "LIMIT"
    STOP_LOSS = "STOP_LOSS"
    TAKE_PROFIT = "TAKE_PROFIT"
    STOP_LIMIT = "STOP_LIMIT"


class OrderSide(Enum):
    """Order side (buy or sell)."""
    BUY = "BUY"
    SELL = "SELL"


class OrderStatus(Enum):
    """Status of an order."""
    CREATED = "CREATED"
    OPEN = "OPEN"
    PARTIALLY_FILLED = "PARTIALLY_FILLED"
    FILLED = "FILLED"
    CANCELED = "CANCELED"
    REJECTED = "REJECTED"
    EXPIRED = "EXPIRED"


class PositionSide(Enum):
    """Position side (long or short)."""
    LONG = "LONG"
    SHORT = "SHORT"


class ExchangeType(Enum):
    """Type of exchange."""
    CEX = "CEX"
    DEX = "DEX"


class StrategyType(Enum):
    """Type of trading strategy."""
    TREND_FOLLOWING = "TREND_FOLLOWING"
    ARBITRAGE = "ARBITRAGE"
    MEAN_REVERSION = "MEAN_REVERSION"
    CUSTOM = "CUSTOM"


class SignalType(Enum):
    """Type of trading signal."""
    ENTRY = "ENTRY"
    EXIT = "EXIT"
    ADJUST = "ADJUST"


class AlertType(Enum):
    """Type of alert or notification."""
    INFO = "INFO"
    WARNING = "WARNING"
    ERROR = "ERROR"
    SUCCESS = "SUCCESS"


@dataclass
class Asset:
    """Represents a cryptocurrency asset that can be traded."""
    symbol: str
    name: str
    decimal_places: int
    min_order_size: float
    max_order_size: Optional[float] = None
    trading_fee: float = 0.001
    is_active: bool = True


@dataclass
class Exchange:
    """Represents a cryptocurrency exchange where trading occurs."""
    name: str
    exchange_type: ExchangeType
    base_url: str
    websocket_url: str
    api_key: str = ""
    api_secret: str = ""
    rate_limits: Dict = field(default_factory=dict)
    supported_assets: List[str] = field(default_factory=list)
    trading_pairs: List[str] = field(default_factory=list)
    is_active: bool = True


@dataclass
class MarketData:
    """Represents market data for a specific trading pair."""
    exchange: str
    trading_pair: str
    timestamp: datetime
    open_price: float
    high_price: float
    low_price: float
    close_price: float
    volume: float
    num_trades: int = 0
    bid_price: Optional[float] = None
    ask_price: Optional[float] = None
    bid_volume: Optional[float] = None
    ask_volume: Optional[float] = None


@dataclass
class Order:
    """Represents a trading order."""
    exchange: str
    trading_pair: str
    order_type: OrderType
    side: OrderSide
    quantity: float
    price: Optional[float] = None
    status: OrderStatus = OrderStatus.CREATED
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    filled_quantity: float = 0.0
    average_fill_price: Optional[float] = None
    fees: float = 0.0
    strategy_id: Optional[str] = None
    id: Optional[str] = None  # Assigned by exchange


@dataclass
class Position:
    """Represents an open position in a trading pair."""
    exchange: str
    trading_pair: str
    side: PositionSide
    entry_price: float
    quantity: float
    unrealized_pnl: float = 0.0
    realized_pnl: float = 0.0
    open_time: datetime = field(default_factory=datetime.now)
    last_update_time: datetime = field(default_factory=datetime.now)
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    strategy_id: Optional[str] = None
    id: Optional[str] = None


@dataclass
class Strategy:
    """Represents a trading strategy configuration."""
    name: str
    type: StrategyType
    parameters: Dict = field(default_factory=dict)
    risk_parameters: Dict = field(default_factory=dict)
    target_exchanges: List[str] = field(default_factory=list)
    target_pairs: List[str] = field(default_factory=list)
    status: str = "ACTIVE"
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    id: Optional[str] = None


@dataclass
class Signal:
    """Represents a trading signal generated by a strategy."""
    strategy_id: str
    trading_pair: str
    exchange: str
    signal_type: SignalType
    direction: PositionSide
    strength: float  # 0.0 to 1.0
    price: Optional[float] = None
    quantity: Optional[float] = None
    timestamp: datetime = field(default_factory=datetime.now)
    expiration: Optional[datetime] = None
    metadata: Dict = field(default_factory=dict)
    id: Optional[str] = None


@dataclass
class Trade:
    """Represents a completed trade (filled order)."""
    order_id: str
    exchange: str
    trading_pair: str
    side: OrderSide
    quantity: float
    price: float
    fee: float
    timestamp: datetime
    strategy_id: Optional[str] = None
    id: Optional[str] = None


@dataclass
class Wallet:
    """Represents a wallet balance on an exchange."""
    exchange: str
    asset: str
    total_balance: float
    available_balance: float
    locked_balance: float = 0.0
    last_update_time: datetime = field(default_factory=datetime.now)


@dataclass
class PerformanceMetrics:
    """Represents performance metrics for a strategy."""
    strategy_id: str
    start_time: datetime
    end_time: datetime
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    win_rate: float = 0.0
    profit_loss: float = 0.0
    profit_loss_percent: float = 0.0
    max_drawdown: float = 0.0
    max_drawdown_percent: float = 0.0
    sharpe_ratio: float = 0.0
    sortino_ratio: float = 0.0
    volatility: float = 0.0


@dataclass
class Alert:
    """Represents an alert or notification."""
    type: AlertType
    source: str
    message: str
    timestamp: datetime = field(default_factory=datetime.now)
    is_read: bool = False
    related_entity_id: Optional[str] = None
    severity: int = 1  # 1-5
    id: Optional[str] = None
